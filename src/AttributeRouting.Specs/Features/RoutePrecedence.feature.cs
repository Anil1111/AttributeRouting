// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.8.1.0
//      SpecFlow Generator Version:1.8.0.0
//      Runtime Version:4.0.30319.17929
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace AttributeRouting.Specs.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.8.1.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Route Precedence")]
    public partial class RoutePrecedenceFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "RoutePrecedence.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Route Precedence", "", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Route precedence among routes for an action using the Order property")]
        public virtual void RoutePrecedenceAmongRoutesForAnActionUsingTheOrderProperty()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Route precedence among routes for an action using the Order property", ((string[])(null)));
#line 3
this.ScenarioSetup(scenarioInfo);
#line 4
 testRunner.Given("I have registered the routes for the RoutePrecedenceAmongRoutesController");
#line 5
 testRunner.When("I fetch the routes for the RoutePrecedenceAmongRoutes controller\'s Index action");
#line 6
 testRunner.Then("7 routes are found");
#line 7
 testRunner.And("the 1st route\'s url is \"Index/First\"");
#line 8
 testRunner.And("the 2nd route\'s url is \"Index/Second\"");
#line 9
 testRunner.And("the 3rd route\'s url is \"Index/Third\"");
#line 10
 testRunner.And("the 4th route\'s url is \"Index/Fourth\"");
#line 11
 testRunner.And("the 5th route\'s url is \"Index/Fifth\"");
#line 12
 testRunner.And("the 6th route\'s url is \"Index/Sixth\"");
#line 13
 testRunner.And("the 7th route\'s url is \"Index/Seventh\"");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Route precedence among actions within a controller using the Precedence property")]
        public virtual void RoutePrecedenceAmongActionsWithinAControllerUsingThePrecedenceProperty()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Route precedence among actions within a controller using the Precedence property", ((string[])(null)));
#line 15
this.ScenarioSetup(scenarioInfo);
#line 16
 testRunner.Given("I have registered the routes for the RoutePrecedenceAmongActionsController");
#line 17
 testRunner.When("I fetch the routes for the RoutePrecedenceAmongActions controller");
#line 18
 testRunner.Then("the 1st route\'s url is \"Route1\"");
#line 19
 testRunner.And("the 2nd route\'s url is \"Route2\"");
#line 20
 testRunner.And("the 3rd route\'s url is \"Route3\"");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Route precedence among controllers added individually using the configuration api" +
            "")]
        public virtual void RoutePrecedenceAmongControllersAddedIndividuallyUsingTheConfigurationApi()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Route precedence among controllers added individually using the configuration api" +
                    "", ((string[])(null)));
#line 22
this.ScenarioSetup(scenarioInfo);
#line 23
 testRunner.Given("I have a new configuration object");
#line 24
 testRunner.And("I add the routes from the RoutePrecedenceAmongControllers1 controller");
#line 25
 testRunner.And("I add the routes from the RoutePrecedenceAmongControllers2 controller");
#line 26
 testRunner.And("I add the routes from the RoutePrecedenceAmongControllers3 controller");
#line 27
 testRunner.When("I generate the routes with this configuration");
#line 28
 testRunner.Then("the routes from the RoutePrecedenceAmongControllers1 controller precede those fro" +
                    "m the RoutePrecedenceAmongControllers2 controller");
#line 29
 testRunner.And("the routes from the RoutePrecedenceAmongControllers2 controller precede those fro" +
                    "m the RoutePrecedenceAmongControllers3 controller");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Route precedence among controllers added by base type using the configuration api" +
            "")]
        public virtual void RoutePrecedenceAmongControllersAddedByBaseTypeUsingTheConfigurationApi()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Route precedence among controllers added by base type using the configuration api" +
                    "", ((string[])(null)));
#line 31
this.ScenarioSetup(scenarioInfo);
#line 32
 testRunner.Given("I have a new configuration object");
#line 33
 testRunner.And("I add the routes from controllers derived from the RoutePrecedenceAmongDerivedCon" +
                    "trollersBase controller");
#line 34
 testRunner.And("I add the routes from the RoutePrecedenceAmongControllers1 controller");
#line 35
 testRunner.When("I generate the routes with this configuration");
#line 36
 testRunner.Then("the routes from the RoutePrecedenceAmongDerivedControllers1 controller precede th" +
                    "ose from the RoutePrecedenceAmongControllers1 controller");
#line 37
 testRunner.And("the routes from the RoutePrecedenceAmongDerivedControllers2 controller precede th" +
                    "ose from the RoutePrecedenceAmongControllers1 controller");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Route precedence set for the site using the SitePrecedence property")]
        public virtual void RoutePrecedenceSetForTheSiteUsingTheSitePrecedenceProperty()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Route precedence set for the site using the SitePrecedence property", ((string[])(null)));
#line 39
this.ScenarioSetup(scenarioInfo);
#line 41
 testRunner.Given("I have a new configuration object");
#line 42
 testRunner.And("I add the routes from the RoutePrecedenceAmongControllers1 controller");
#line 43
 testRunner.And("I add the routes from the RoutePrecedenceAmongTheSitesRoutes controller");
#line 44
 testRunner.When("I generate the routes with this configuration");
#line 45
 testRunner.And("I fetch all the routes");
#line 46
 testRunner.Then("the 1st route\'s url is \"I-Am-The-First-Route\"");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Web API route precedence among routes for an action using the Order property")]
        public virtual void WebAPIRoutePrecedenceAmongRoutesForAnActionUsingTheOrderProperty()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Web API route precedence among routes for an action using the Order property", ((string[])(null)));
#line 50
this.ScenarioSetup(scenarioInfo);
#line 51
 testRunner.Given("I have registered the routes for the HttpRoutePrecedenceAmongRoutesController");
#line 52
 testRunner.When("I fetch the routes for the HttpRoutePrecedenceAmongRoutes controller\'s Get action" +
                    "");
#line 53
 testRunner.Then("7 routes are found");
#line 54
 testRunner.And("the 1st route\'s url is \"Get/First\"");
#line 55
 testRunner.And("the 2nd route\'s url is \"Get/Second\"");
#line 56
 testRunner.And("the 3rd route\'s url is \"Get/Third\"");
#line 57
 testRunner.And("the 4th route\'s url is \"Get/Fourth\"");
#line 58
 testRunner.And("the 5th route\'s url is \"Get/Fifth\"");
#line 59
 testRunner.And("the 6th route\'s url is \"Get/Sixth\"");
#line 60
 testRunner.And("the 7th route\'s url is \"Get/Seventh\"");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Web API route precedence among actions within a controller using the Precedence p" +
            "roperty")]
        public virtual void WebAPIRoutePrecedenceAmongActionsWithinAControllerUsingThePrecedenceProperty()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Web API route precedence among actions within a controller using the Precedence p" +
                    "roperty", ((string[])(null)));
#line 62
this.ScenarioSetup(scenarioInfo);
#line 63
 testRunner.Given("I have registered the routes for the HttpRoutePrecedenceAmongActionsController");
#line 64
 testRunner.When("I fetch the routes for the HttpRoutePrecedenceAmongActions controller");
#line 65
 testRunner.Then("the 1st route\'s url is \"ApiRoute1\"");
#line 66
 testRunner.And("the 2nd route\'s url is \"ApiRoute2\"");
#line 67
 testRunner.And("the 3rd route\'s url is \"ApiRoute3\"");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Web API route precedence among controllers added individually using the configura" +
            "tion api")]
        public virtual void WebAPIRoutePrecedenceAmongControllersAddedIndividuallyUsingTheConfigurationApi()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Web API route precedence among controllers added individually using the configura" +
                    "tion api", ((string[])(null)));
#line 69
this.ScenarioSetup(scenarioInfo);
#line 70
 testRunner.Given("I have a new configuration object");
#line 71
 testRunner.And("I add the routes from the HttpRoutePrecedenceAmongControllers1 controller");
#line 72
 testRunner.And("I add the routes from the HttpRoutePrecedenceAmongControllers2 controller");
#line 73
 testRunner.And("I add the routes from the HttpRoutePrecedenceAmongControllers3 controller");
#line 74
 testRunner.When("I generate the routes with this configuration");
#line 75
 testRunner.Then("the routes from the HttpRoutePrecedenceAmongControllers1 controller precede those" +
                    " from the HttpRoutePrecedenceAmongControllers2 controller");
#line 76
 testRunner.And("the routes from the HttpRoutePrecedenceAmongControllers2 controller precede those" +
                    " from the HttpRoutePrecedenceAmongControllers3 controller");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Web API route precedence among controllers added by base type using the configura" +
            "tion api")]
        public virtual void WebAPIRoutePrecedenceAmongControllersAddedByBaseTypeUsingTheConfigurationApi()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Web API route precedence among controllers added by base type using the configura" +
                    "tion api", ((string[])(null)));
#line 78
this.ScenarioSetup(scenarioInfo);
#line 79
 testRunner.Given("I have a new configuration object");
#line 80
 testRunner.And("I add the routes from controllers derived from the HttpRoutePrecedenceAmongDerive" +
                    "dControllersBase controller");
#line 81
 testRunner.And("I add the routes from the HttpRoutePrecedenceAmongControllers1 controller");
#line 82
 testRunner.When("I generate the routes with this configuration");
#line 83
 testRunner.Then("the routes from the HttpRoutePrecedenceAmongDerivedControllers1 controller preced" +
                    "e those from the HttpRoutePrecedenceAmongControllers1 controller");
#line 84
 testRunner.And("the routes from the HttpRoutePrecedenceAmongDerivedControllers2 controller preced" +
                    "e those from the HttpRoutePrecedenceAmongControllers1 controller");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
