// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.8.1.0
//      SpecFlow Generator Version:1.8.0.0
//      Runtime Version:4.0.30319.269
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace AttributeRouting.Specs.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.8.1.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Route Areas")]
    public partial class RouteAreasFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "RouteAreas.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Route Areas", "", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Generating area routes")]
        public virtual void GeneratingAreaRoutes()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Generating area routes", ((string[])(null)));
#line 3
this.ScenarioSetup(scenarioInfo);
#line 5
 testRunner.Given("I have registered the routes for the AreasController");
#line 6
 testRunner.When("I fetch the routes for the Areas controller\'s Index action");
#line 7
 testRunner.Then("the route url is \"Area/Index\"");
#line 8
 testRunner.And("the data token for \"area\" is \"Area\"");
#line 10
 testRunner.Given("I have registered the routes for the HttpAreasController");
#line 11
 testRunner.When("I fetch the routes for the HttpAreas controller\'s Get action");
#line 12
 testRunner.Then("the route url is \"ApiArea/Get\"");
#line 13
 testRunner.And("the data token for \"area\" is \"ApiArea\"");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Generating area routes when route urls specify a duplicate area prefix")]
        public virtual void GeneratingAreaRoutesWhenRouteUrlsSpecifyADuplicateAreaPrefix()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Generating area routes when route urls specify a duplicate area prefix", ((string[])(null)));
#line 15
this.ScenarioSetup(scenarioInfo);
#line 17
 testRunner.Given("I have registered the routes for the AreasController");
#line 18
 testRunner.When("I fetch the routes for the Areas controller\'s DuplicatePrefix action");
#line 19
 testRunner.Then("the route url is \"Area/DuplicatePrefix\"");
#line 21
 testRunner.Given("I have registered the routes for the HttpAreasController");
#line 22
 testRunner.When("I fetch the routes for the HttpAreas controller\'s DuplicatePrefix action");
#line 23
 testRunner.Then("the route url is \"ApiArea/DuplicatePrefix\"");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Generating absolute routes when a route area is defined")]
        public virtual void GeneratingAbsoluteRoutesWhenARouteAreaIsDefined()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Generating absolute routes when a route area is defined", ((string[])(null)));
#line 25
this.ScenarioSetup(scenarioInfo);
#line 27
 testRunner.Given("I have registered the routes for the AreasController");
#line 28
 testRunner.When("I fetch the routes for the Areas controller\'s Absolute action");
#line 29
 testRunner.Then("the route url is \"AreaAbsolute\"");
#line 31
 testRunner.Given("I have registered the routes for the HttpAreasController");
#line 32
 testRunner.When("I fetch the routes for the HttpAreas controller\'s Absolute action");
#line 33
 testRunner.Then("the route url is \"ApiAreaAbsolute\"");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Generating area routes when route url starts with the area prefix")]
        public virtual void GeneratingAreaRoutesWhenRouteUrlStartsWithTheAreaPrefix()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Generating area routes when route url starts with the area prefix", ((string[])(null)));
#line 35
this.ScenarioSetup(scenarioInfo);
#line 37
 testRunner.Given("I have registered the routes for the AreasController");
#line 38
 testRunner.When("I fetch the routes for the Areas controller\'s RouteBeginsWithAreaName action");
#line 39
 testRunner.Then("the route url is \"Area/Areas\"");
#line 41
 testRunner.Given("I have registered the routes for the HttpAreasController");
#line 42
 testRunner.When("I fetch the routes for the HttpAreas controller\'s RouteBeginsWithAreaName action");
#line 43
 testRunner.Then("the route url is \"ApiArea/ApiAreas\"");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Generating area routes with an explicit area url")]
        public virtual void GeneratingAreaRoutesWithAnExplicitAreaUrl()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Generating area routes with an explicit area url", ((string[])(null)));
#line 45
this.ScenarioSetup(scenarioInfo);
#line 47
 testRunner.Given("I have registered the routes for the ExplicitAreaUrlController");
#line 48
 testRunner.When("I fetch the routes for the ExplicitAreaUrl controller\'s Index action");
#line 49
 testRunner.Then("the route url is \"ExplicitArea/Index\"");
#line 50
 testRunner.And("the data token for \"area\" is \"Area\"");
#line 52
 testRunner.Given("I have registered the routes for the HttpExplicitAreaUrlController");
#line 53
 testRunner.When("I fetch the routes for the HttpExplicitAreaUrl controller\'s Get action");
#line 54
 testRunner.Then("the route url is \"ApiExplicitArea/Get\"");
#line 55
 testRunner.And("the data token for \"area\" is \"ApiArea\"");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Generating area routes with an explicit area url when route urls specify a duplic" +
            "ate area prefix")]
        public virtual void GeneratingAreaRoutesWithAnExplicitAreaUrlWhenRouteUrlsSpecifyADuplicateAreaPrefix()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Generating area routes with an explicit area url when route urls specify a duplic" +
                    "ate area prefix", ((string[])(null)));
#line 57
this.ScenarioSetup(scenarioInfo);
#line 59
 testRunner.Given("I have registered the routes for the ExplicitAreaUrlController");
#line 60
 testRunner.When("I fetch the routes for the ExplicitAreaUrl controller\'s DuplicatePrefix action");
#line 61
 testRunner.Then("the route url is \"ExplicitArea/DuplicatePrefix\"");
#line 62
 testRunner.And("the data token for \"area\" is \"Area\"");
#line 64
 testRunner.Given("I have registered the routes for the HttpExplicitAreaUrlController");
#line 65
 testRunner.When("I fetch the routes for the HttpExplicitAreaUrl controller\'s DuplicatePrefix actio" +
                    "n");
#line 66
 testRunner.Then("the route url is \"ApiExplicitArea/DuplicatePrefix\"");
#line 67
 testRunner.And("the data token for \"area\" is \"ApiArea\"");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
