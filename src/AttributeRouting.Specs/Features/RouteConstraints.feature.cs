// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.8.1.0
//      SpecFlow Generator Version:1.8.0.0
//      Runtime Version:4.0.30319.261
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace AttributeRouting.Specs.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.8.1.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Route Constraints")]
    public partial class RouteConstraintsFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "RouteConstraints.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Route Constraints", "", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 3
#line 4
 testRunner.Given("I generate the routes defined in the subject controllers");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Regex route constraints specified with an attribute")]
        public virtual void RegexRouteConstraintsSpecifiedWithAnAttribute()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Regex route constraints specified with an attribute", ((string[])(null)));
#line 6
this.ScenarioSetup(scenarioInfo);
#line 3
this.FeatureBackground();
#line 7
 testRunner.When("I fetch the routes for the RouteConstraints controller\'s Index action");
#line 8
 testRunner.Then("the parameter \"p1\" is constrained by the pattern \"\\d+\"");
#line 9
 testRunner.When("I fetch the routes for the ApiRouteConstraints controller\'s Get action");
#line 10
 testRunner.Then("the parameter \"p1\" is constrained by the pattern \"\\d+\"");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Regex route constraints specified inline")]
        public virtual void RegexRouteConstraintsSpecifiedInline()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Regex route constraints specified inline", ((string[])(null)));
#line 12
this.ScenarioSetup(scenarioInfo);
#line 3
this.FeatureBackground();
#line 13
 testRunner.When("I fetch the routes for the RouteConstraints controller\'s InlineConstraints action" +
                    "");
#line 14
 testRunner.Then("the route url is \"InlineConstraints/{number}/{word}/{alphanum}/{capture}\"");
#line 15
 testRunner.Then("the parameter \"number\" is constrained by the pattern \"\\d+\"");
#line 16
 testRunner.Then("the parameter \"word\" is constrained by the pattern \"\\w{2}\"");
#line 17
 testRunner.Then("the parameter \"alphanum\" is constrained by the pattern \"[A-Za-z0-9]*\"");
#line 18
 testRunner.Then("the parameter \"capture\" is constrained by the pattern \"(gotcha)\"");
#line 19
 testRunner.When("I fetch the routes for the HttpRouteConstraints controller\'s InlineConstraints ac" +
                    "tion");
#line 20
 testRunner.Then("the route url is \"InlineConstraints/{number}/{word}/{alphanum}/{capture}\"");
#line 21
 testRunner.Then("the parameter \"number\" is constrained by the pattern \"\\d+\"");
#line 22
 testRunner.Then("the parameter \"word\" is constrained by the pattern \"\\w{2}\"");
#line 23
 testRunner.Then("the parameter \"alphanum\" is constrained by the pattern \"[A-Za-z0-9]*\"");
#line 24
 testRunner.Then("the parameter \"capture\" is constrained by the pattern \"(gotcha)\"");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Inline constraints")]
        [NUnit.Framework.TestCaseAttribute("Int", "IntRouteConstraint", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Long", "LongRouteConstraint", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Float", "FloatRouteConstraint", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Double", "DoubleRouteConstraint", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Decimal", "DecimalRouteConstraint", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Bool", "BoolRouteConstraint", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Length", "LengthRouteConstraint", new string[0])]
        [NUnit.Framework.TestCaseAttribute("MinLength", "MinLengthRouteConstraint", new string[0])]
        [NUnit.Framework.TestCaseAttribute("MaxLength", "MaxLengthRouteConstraint", new string[0])]
        [NUnit.Framework.TestCaseAttribute("LengthRange", "LengthRouteConstraint", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Min", "MinRouteConstraint", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Max", "MaxRouteConstraint", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Range", "RangeRouteConstraint", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Regex", "RegexRouteConstraint", new string[0])]
        public virtual void InlineConstraints(string actionName, string constraintTypeName, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Inline constraints", exampleTags);
#line 26
this.ScenarioSetup(scenarioInfo);
#line 3
this.FeatureBackground();
#line 28
 testRunner.When(string.Format("I fetch the routes for the InlineRouteConstraints controller\'s {0} action", actionName));
#line 29
 testRunner.Then(string.Format("the route url is \"Inline-Constraints/{0}/{{x}}\"", actionName));
#line 30
 testRunner.And(string.Format("the parameter \"x\" is constrained by an inline AttributeRouting.Web.Constraints.{0" +
                        "}", constraintTypeName));
#line 32
 testRunner.When(string.Format("I fetch the routes for the HttpInlineRouteConstraints controller\'s {0} action", actionName));
#line 33
 testRunner.Then(string.Format("the route url is \"Http-Inline-Constraints/{0}/{{x}}\"", actionName));
#line 34
 testRunner.And(string.Format("the parameter \"x\" is constrained by an inline AttributeRouting.Web.Constraints.{0" +
                        "}", constraintTypeName));
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Compound inline constraints")]
        public virtual void CompoundInlineConstraints()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Compound inline constraints", ((string[])(null)));
#line 52
this.ScenarioSetup(scenarioInfo);
#line 3
this.FeatureBackground();
#line 54
 testRunner.When("I fetch the routes for the InlineRouteConstraints controller\'s Compound action");
#line 55
 testRunner.Then("the route url is \"Inline-Constraints/Compound/{x}\"");
#line 56
 testRunner.And("the parameter \"x\" is constrained by an inline AttributeRouting.Web.Constraints.In" +
                    "tRouteConstraint");
#line 57
 testRunner.And("the parameter \"x\" is constrained by an inline AttributeRouting.Web.Constraints.Ma" +
                    "xRouteConstraint");
#line 59
 testRunner.When("I fetch the routes for the HttpInlineRouteConstraints controller\'s Compound actio" +
                    "n");
#line 60
 testRunner.Then("the route url is \"Http-Inline-Constraints/Compound/{x}\"");
#line 61
 testRunner.And("the parameter \"x\" is constrained by an inline AttributeRouting.Web.Constraints.In" +
                    "tRouteConstraint");
#line 62
 testRunner.And("the parameter \"x\" is constrained by an inline AttributeRouting.Web.Constraints.Ma" +
                    "xRouteConstraint");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Multiple routes with different constraints")]
        public virtual void MultipleRoutesWithDifferentConstraints()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Multiple routes with different constraints", ((string[])(null)));
#line 64
this.ScenarioSetup(scenarioInfo);
#line 3
this.FeatureBackground();
#line 65
 testRunner.When("I fetch the routes for the RouteConstraints controller\'s MultipleRoutes action");
#line 66
 testRunner.Then("the route named \"MultipleConstraints1\" has a constraint on \"p1\" of \"\\d+\"");
#line 67
 testRunner.And("the route named \"MultipleConstraints2\" has a constraint on \"p1\" of \"\\d{4}\"");
#line 68
 testRunner.And("the route named \"ApiMultipleConstraints1\" has a constraint on \"p1\" of \"\\d+\"");
#line 69
 testRunner.And("the route named \"ApiMultipleConstraints2\" has a constraint on \"p1\" of \"\\d{4}\"");
#line 70
 testRunner.When("I fetch the routes for the HttpRouteConstraints controller\'s MultipleRoutes actio" +
                    "n");
#line 71
 testRunner.Then("the route named \"MultipleConstraints1\" has a constraint on \"p1\" of \"\\d+\"");
#line 72
 testRunner.And("the route named \"MultipleConstraints2\" has a constraint on \"p1\" of \"\\d{4}\"");
#line 73
 testRunner.And("the route named \"ApiMultipleConstraints1\" has a constraint on \"p1\" of \"\\d+\"");
#line 74
 testRunner.And("the route named \"ApiMultipleConstraints2\" has a constraint on \"p1\" of \"\\d{4}\"");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
