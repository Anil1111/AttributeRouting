// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.8.1.0
//      SpecFlow Generator Version:1.8.0.0
//      Runtime Version:4.0.30319.17929
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace AttributeRouting.Specs.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.8.1.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Inheriting Actions")]
    public partial class InheritingActionsFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "InheritingActions.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Inheriting Actions", "", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Inheriting actions in a derived controller")]
        public virtual void InheritingActionsInADerivedController()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Inheriting actions in a derived controller", ((string[])(null)));
#line 3
this.ScenarioSetup(scenarioInfo);
#line 4
 testRunner.Given("I have registered the routes for the SuperController");
#line 5
 testRunner.When("I fetch the routes for the SuperController\'s Index action");
#line 6
 testRunner.Then("the route url is \"InheritedActions/Index\"");
#line 7
 testRunner.Given("I have registered the routes for the DerivedController");
#line 8
 testRunner.When("I fetch the routes for the DerivedController\'s Index action");
#line 9
 testRunner.Then("the route url is \"InheritedActions/Index\"");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Inheriting actions in a derived controller overriding the url of an action")]
        public virtual void InheritingActionsInADerivedControllerOverridingTheUrlOfAnAction()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Inheriting actions in a derived controller overriding the url of an action", ((string[])(null)));
#line 11
this.ScenarioSetup(scenarioInfo);
#line 12
 testRunner.Given("I have registered the routes for the SuperController");
#line 13
 testRunner.When("I fetch the routes for the SuperController\'s Index action");
#line 14
 testRunner.Then("the route url is \"InheritedActions/Index\"");
#line 15
 testRunner.Given("I have registered the routes for the DerivedWithOverrideController");
#line 16
 testRunner.When("I fetch the routes for the DerivedWithOverrideController\'s Index action");
#line 17
 testRunner.Then("the route url is \"InheritedActions/IndexDerived\"");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Inheriting actions in a derived controller that specifies an area")]
        public virtual void InheritingActionsInADerivedControllerThatSpecifiesAnArea()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Inheriting actions in a derived controller that specifies an area", ((string[])(null)));
#line 19
this.ScenarioSetup(scenarioInfo);
#line 20
 testRunner.Given("I have registered the routes for the SuperWithAreaController");
#line 21
 testRunner.When("I fetch the routes for the SuperWithAreaController\'s Index action");
#line 22
 testRunner.Then("the route url is \"Super/InheritedActions/Index\"");
#line 23
 testRunner.Given("I have registered the routes for the DerivedWithAreaController");
#line 24
 testRunner.When("I fetch the routes for the DerivedWithAreaController\'s Index action");
#line 25
 testRunner.Then("the route url is \"Derived/InheritedActions/Index\"");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Inheriting actions in a derived controller that specifies a prefix")]
        public virtual void InheritingActionsInADerivedControllerThatSpecifiesAPrefix()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Inheriting actions in a derived controller that specifies a prefix", ((string[])(null)));
#line 27
this.ScenarioSetup(scenarioInfo);
#line 28
 testRunner.Given("I have registered the routes for the SuperWithPrefixController");
#line 29
 testRunner.When("I fetch the routes for the SuperWithPrefixController\'s Index action");
#line 30
 testRunner.Then("the route url is \"InheritedActions/Super/Index\"");
#line 31
 testRunner.Given("I have registered the routes for the DerivedWithPrefixController");
#line 32
 testRunner.When("I fetch the routes for the DerivedWithPrefixController\'s Index action");
#line 33
 testRunner.Then("the route url is \"InheritedActions/Derived/Index\"");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
